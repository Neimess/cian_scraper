import asyncio
from types import MethodType

from aiogram import types

from db.crud.manager_users import get_or_create_user, get_user_config
from db.database import database
from src.bot.keyboards.settings_keyboards import get_main_menu
from src.utils import error_handler, log, notify_listings_handler, to_dict
from src.web_scraper.scraper import CianScraper


@log
@error_handler
async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ Cian.ru.\n\n"
        "üîç –ö–æ–º–∞–Ω–¥—ã:\n"
        "/search - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
        "/menu - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
    )
    async with database() as db:
        await get_or_create_user(db, message.chat.id)

    await message.answer(text, parse_mode="Markdown", reply_markup=get_main_menu())


@log
@error_handler
async def menu_handler(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@log
@error_handler
async def search_handler(message: types.Message, bot_instance):
    user_id = message.chat.id
    if user_id in bot_instance.user_tasks and not bot_instance.user_tasks[user_id].done():
        await message.answer("‚ùå –ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ /stop")
        return

    async with database() as db:
        user_config = await get_user_config(db, user_id)
        user_params = to_dict(user_config)

    scraper = CianScraper(params=user_params, freeze_time=10, telegram_user_id=user_id)
    original_method = scraper.save_new_listings.__func__
    decorated_func = notify_listings_handler(bot_instance.send_notification)(original_method)
    scraper.save_new_listings = MethodType(decorated_func, scraper)

    bot_instance.user_scrapers[user_id] = scraper

    task = asyncio.create_task(bot_instance._run_scraper(scraper))
    bot_instance.user_tasks[user_id] = task
    await message.answer("üîç –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω!")


@log
@error_handler
async def stop_handler(message: types.Message, bot_instance):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫.
    """
    user_id = message.from_user.id

    if user_id in bot_instance.user_tasks and bot_instance.user_tasks[user_id]:
        bot_instance.user_tasks[user_id].cancel()
        del bot_instance.user_tasks[user_id]

    if user_id in bot_instance.user_scrapers:
        del bot_instance.user_scrapers[user_id]

    await message.answer("‚èπ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
